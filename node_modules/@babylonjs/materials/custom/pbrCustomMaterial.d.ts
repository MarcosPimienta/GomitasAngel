import type { Texture } from "@babylonjs/core/Materials/Textures/texture.js";
import { Effect } from "@babylonjs/core/Materials/effect.js";
import type { MaterialDefines } from "@babylonjs/core/Materials/materialDefines.js";
import { PBRMaterial } from "@babylonjs/core/Materials/PBR/pbrMaterial.js";
import type { Mesh } from "@babylonjs/core/Meshes/mesh.js";
import type { Scene } from "@babylonjs/core/scene.js";
import type { ICustomShaderNameResolveOptions } from "@babylonjs/core/Materials/material.js";
export declare class ShaderAlebdoParts {
    constructor();
    Fragment_Begin: string;
    Fragment_Definitions: string;
    Fragment_MainBegin: string;
    Fragment_MainEnd: string;
    Fragment_Custom_Albedo: string;
    Fragment_Before_Lights: string;
    Fragment_Custom_MetallicRoughness: string;
    Fragment_Custom_MicroSurface: string;
    Fragment_Before_Fog: string;
    Fragment_Custom_Alpha: string;
    Fragment_Before_FinalColorComposition: string;
    Fragment_Before_FragColor: string;
    Vertex_Begin: string;
    Vertex_Definitions: string;
    Vertex_MainBegin: string;
    Vertex_Before_PositionUpdated: string;
    Vertex_Before_NormalUpdated: string;
    Vertex_After_WorldPosComputed: string;
    Vertex_MainEnd: string;
}
export declare class PBRCustomMaterial extends PBRMaterial {
    static ShaderIndexer: number;
    CustomParts: ShaderAlebdoParts;
    _isCreatedShader: boolean;
    _createdShaderName: string;
    _customUniform: string[];
    _newUniforms: string[];
    _newUniformInstances: {
        [name: string]: any;
    };
    _newSamplerInstances: {
        [name: string]: Texture;
    };
    _customAttributes: string[];
    FragmentShader: string;
    VertexShader: string;
    AttachAfterBind(mesh: Mesh | undefined, effect: Effect): void;
    ReviewUniform(name: string, arr: string[]): string[];
    Builder(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: MaterialDefines | string[], attributes?: string[], options?: ICustomShaderNameResolveOptions): string;
    constructor(name: string, scene?: Scene);
    AddUniform(name: string, kind: string, param: any): PBRCustomMaterial;
    AddAttribute(name: string): PBRCustomMaterial;
    Fragment_Begin(shaderPart: string): PBRCustomMaterial;
    Fragment_Definitions(shaderPart: string): PBRCustomMaterial;
    Fragment_MainBegin(shaderPart: string): PBRCustomMaterial;
    Fragment_Custom_Albedo(shaderPart: string): PBRCustomMaterial;
    Fragment_Custom_Alpha(shaderPart: string): PBRCustomMaterial;
    Fragment_Before_Lights(shaderPart: string): PBRCustomMaterial;
    Fragment_Custom_MetallicRoughness(shaderPart: string): PBRCustomMaterial;
    Fragment_Custom_MicroSurface(shaderPart: string): PBRCustomMaterial;
    Fragment_Before_Fog(shaderPart: string): PBRCustomMaterial;
    Fragment_Before_FinalColorComposition(shaderPart: string): PBRCustomMaterial;
    Fragment_Before_FragColor(shaderPart: string): PBRCustomMaterial;
    Fragment_MainEnd(shaderPart: string): PBRCustomMaterial;
    Vertex_Begin(shaderPart: string): PBRCustomMaterial;
    Vertex_Definitions(shaderPart: string): PBRCustomMaterial;
    Vertex_MainBegin(shaderPart: string): PBRCustomMaterial;
    Vertex_Before_PositionUpdated(shaderPart: string): PBRCustomMaterial;
    Vertex_Before_NormalUpdated(shaderPart: string): PBRCustomMaterial;
    Vertex_After_WorldPosComputed(shaderPart: string): PBRCustomMaterial;
    Vertex_MainEnd(shaderPart: string): PBRCustomMaterial;
}
