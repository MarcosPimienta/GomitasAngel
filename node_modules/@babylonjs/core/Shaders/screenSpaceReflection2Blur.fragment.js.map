{"version":3,"file":"screenSpaceReflection2Blur.fragment.js","sourceRoot":"","sources":["../../../../lts/core/generated/Shaders/screenSpaceReflection2Blur.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,MAAM,IAAI,GAAG,uCAAuC,CAAC;AACrD,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiDd,CAAC;AACF,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,gBAAgB;AAChB,MAAM,CAAC,MAAM,qCAAqC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"screenSpaceReflection2BlurPixelShader\";\nconst shader = `#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\n#define TEXTUREFUNC(s,c,lod) texture2DLodEXT(s,c,lod)\n#else\n#define TEXTUREFUNC(s,c,bias) texture2D(s,c,bias)\n#endif\nuniform sampler2D textureSampler;\rvarying vec2 vUV;\runiform vec2 texelOffsetScale;\rconst float weights[8]=float[8] (0.071303,0.131514,0.189879,0.321392,0.452906, 0.584419,0.715932,0.847445);\rvoid processSample(vec2 uv,float i,vec2 stepSize,inout vec4 accumulator,inout float denominator)\r{\rvec2 offsetUV=stepSize*i+uv;\rfloat coefficient=weights[int(2.0-abs(i))];\raccumulator+=TEXTUREFUNC(textureSampler,offsetUV,0.0)*coefficient;\rdenominator+=coefficient;\r}\rvoid main()\r{\rvec4 colorFull=TEXTUREFUNC(textureSampler,vUV,0.0);\rif (dot(colorFull,vec4(1.0))==0.0) {\rgl_FragColor=colorFull;\rreturn;\r}\rfloat blurRadius=colorFull.a*255.0; \rvec2 stepSize=texelOffsetScale.xy*blurRadius;\rvec4 accumulator=TEXTUREFUNC(textureSampler,vUV,0.0)*0.214607;\rfloat denominator=0.214607;\rprocessSample(vUV,1.0,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*0.2,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*0.4,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*0.6,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*0.8,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*1.2,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*1.4,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*1.6,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*1.8,stepSize,accumulator,denominator);\rprocessSample(vUV,1.0*2.0,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*0.2,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*0.4,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*0.6,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*0.8,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*1.2,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*1.4,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*1.6,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*1.8,stepSize,accumulator,denominator);\rprocessSample(vUV,-1.0*2.0,stepSize,accumulator,denominator);\rgl_FragColor=vec4(accumulator.rgb/denominator,colorFull.a);\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const screenSpaceReflection2BlurPixelShader = { name, shader };\n"]}