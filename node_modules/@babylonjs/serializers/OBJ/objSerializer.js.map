{"version":3,"file":"objSerializer.js","sourceRoot":"","sources":["../../../../lts/serializers/generated/OBJ/objSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Geometry } from \"core/Meshes/geometry\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\n/**\r\n * Class for generating OBJ data from a Babylon scene.\r\n */\r\nexport class OBJExport {\r\n    /**\r\n     * Exports the geometry of a Mesh array in .OBJ file format (text)\r\n     * @param mesh defines the list of meshes to serialize\r\n     * @param materials defines if materials should be exported\r\n     * @param matlibname defines the name of the associated mtl file\r\n     * @param globalposition defines if the exported positions are globals or local to the exported mesh\r\n     * @returns the OBJ content\r\n     */\r\n    public static OBJ(mesh: Mesh[], materials?: boolean, matlibname?: string, globalposition?: boolean): string {\r\n        const output: string[] = [];\r\n        let v = 1;\r\n        // keep track of uv index in case mixed meshes are passed in\r\n        let textureV = 1;\r\n\r\n        if (materials) {\r\n            if (!matlibname) {\r\n                matlibname = \"mat\";\r\n            }\r\n            output.push(\"mtllib \" + matlibname + \".mtl\");\r\n        }\r\n        for (let j = 0; j < mesh.length; j++) {\r\n            output.push(\"g object\" + j);\r\n            output.push(\"o object_\" + j);\r\n\r\n            //Uses the position of the item in the scene, to the file (this back to normal in the end)\r\n            let inverseTransform: Nullable<Matrix> = null;\r\n            if (globalposition) {\r\n                const transform = mesh[j].computeWorldMatrix(true);\r\n                inverseTransform = new Matrix();\r\n                transform.invertToRef(inverseTransform);\r\n\r\n                mesh[j].bakeTransformIntoVertices(transform);\r\n            }\r\n\r\n            //TODO: submeshes (groups)\r\n            //TODO: smoothing groups (s 1, s off);\r\n            if (materials) {\r\n                const mat = mesh[j].material;\r\n\r\n                if (mat) {\r\n                    output.push(\"usemtl \" + mat.id);\r\n                }\r\n            }\r\n            const g: Nullable<Geometry> = mesh[j].geometry;\r\n\r\n            if (!g) {\r\n                Tools.Warn(\"No geometry is present on the mesh\");\r\n                continue;\r\n            }\r\n\r\n            const trunkVerts = g.getVerticesData(\"position\");\r\n            const trunkNormals = g.getVerticesData(\"normal\");\r\n            const trunkUV = g.getVerticesData(\"uv\");\r\n            const trunkFaces = g.getIndices();\r\n            let currentV = 0;\r\n            let currentTextureV = 0;\r\n\r\n            if (!trunkVerts || !trunkFaces) {\r\n                Tools.Warn(\"There are no position vertices or indices on the mesh!\");\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < trunkVerts.length; i += 3) {\r\n                // Babylon.js default is left handed, while OBJ default is right handed\r\n                // Need to invert Z vertices unless Babylon is set to use a right handed system\r\n                if (mesh[0].getScene().useRightHandedSystem) {\r\n                    output.push(\"v \" + trunkVerts[i] + \" \" + trunkVerts[i + 1] + \" \" + trunkVerts[i + 2]);\r\n                } else {\r\n                    output.push(\"v \" + trunkVerts[i] + \" \" + trunkVerts[i + 1] + \" \" + -trunkVerts[i + 2]);\r\n                }\r\n                currentV++;\r\n            }\r\n\r\n            if (trunkNormals != null) {\r\n                for (let i = 0; i < trunkNormals.length; i += 3) {\r\n                    output.push(\"vn \" + trunkNormals[i] + \" \" + trunkNormals[i + 1] + \" \" + trunkNormals[i + 2]);\r\n                }\r\n            }\r\n            if (trunkUV != null) {\r\n                for (let i = 0; i < trunkUV.length; i += 2) {\r\n                    output.push(\"vt \" + trunkUV[i] + \" \" + trunkUV[i + 1]);\r\n                    currentTextureV++;\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < trunkFaces.length; i += 3) {\r\n                const indices = [String(trunkFaces[i + 2] + v), String(trunkFaces[i + 1] + v), String(trunkFaces[i] + v)];\r\n                const textureIndices = [String(trunkFaces[i + 2] + textureV), String(trunkFaces[i + 1] + textureV), String(trunkFaces[i] + textureV)];\r\n                const blanks: string[] = [\"\", \"\", \"\"];\r\n\r\n                const facePositions = indices;\r\n                const faceUVs = trunkUV != null ? textureIndices : blanks;\r\n                const faceNormals = trunkNormals != null ? indices : blanks;\r\n\r\n                output.push(\r\n                    \"f \" +\r\n                        facePositions[0] +\r\n                        \"/\" +\r\n                        faceUVs[0] +\r\n                        \"/\" +\r\n                        faceNormals[0] +\r\n                        \" \" +\r\n                        facePositions[1] +\r\n                        \"/\" +\r\n                        faceUVs[1] +\r\n                        \"/\" +\r\n                        faceNormals[1] +\r\n                        \" \" +\r\n                        facePositions[2] +\r\n                        \"/\" +\r\n                        faceUVs[2] +\r\n                        \"/\" +\r\n                        faceNormals[2]\r\n                );\r\n            }\r\n            //back de previous matrix, to not change the original mesh in the scene\r\n            if (globalposition && inverseTransform) {\r\n                mesh[j].bakeTransformIntoVertices(inverseTransform);\r\n            }\r\n            v += currentV;\r\n            textureV += currentTextureV;\r\n        }\r\n        const text: string = output.join(\"\\n\");\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Exports the material(s) of a mesh in .MTL file format (text)\r\n     * @param mesh defines the mesh to extract the material from\r\n     * @returns the mtl content\r\n     */\r\n    //TODO: Export the materials of mesh array\r\n    public static MTL(mesh: Mesh): string {\r\n        const output = [];\r\n        const m = <StandardMaterial>mesh.material;\r\n        output.push(\"newmtl mat1\");\r\n        output.push(\"  Ns \" + m.specularPower.toFixed(4));\r\n        output.push(\"  Ni 1.5000\");\r\n        output.push(\"  d \" + m.alpha.toFixed(4));\r\n        output.push(\"  Tr 0.0000\");\r\n        output.push(\"  Tf 1.0000 1.0000 1.0000\");\r\n        output.push(\"  illum 2\");\r\n        output.push(\"  Ka \" + m.ambientColor.r.toFixed(4) + \" \" + m.ambientColor.g.toFixed(4) + \" \" + m.ambientColor.b.toFixed(4));\r\n        output.push(\"  Kd \" + m.diffuseColor.r.toFixed(4) + \" \" + m.diffuseColor.g.toFixed(4) + \" \" + m.diffuseColor.b.toFixed(4));\r\n        output.push(\"  Ks \" + m.specularColor.r.toFixed(4) + \" \" + m.specularColor.g.toFixed(4) + \" \" + m.specularColor.b.toFixed(4));\r\n        output.push(\"  Ke \" + m.emissiveColor.r.toFixed(4) + \" \" + m.emissiveColor.g.toFixed(4) + \" \" + m.emissiveColor.b.toFixed(4));\r\n\r\n        //TODO: uv scale, offset, wrap\r\n        //TODO: UV mirrored in Blender? second UV channel? lightMap? reflection textures?\r\n        const uvscale = \"\";\r\n\r\n        if (m.ambientTexture) {\r\n            output.push(\"  map_Ka \" + uvscale + m.ambientTexture.name);\r\n        }\r\n\r\n        if (m.diffuseTexture) {\r\n            output.push(\"  map_Kd \" + uvscale + m.diffuseTexture.name);\r\n            //TODO: alpha testing, opacity in diffuse texture alpha channel (diffuseTexture.hasAlpha -> map_d)\r\n        }\r\n\r\n        if (m.specularTexture) {\r\n            output.push(\"  map_Ks \" + uvscale + m.specularTexture.name);\r\n            /* TODO: glossiness = specular highlight component is in alpha channel of specularTexture. (???)\r\n            if (m.useGlossinessFromSpecularMapAlpha)  {\r\n                output.push(\"  map_Ns \"+uvscale + m.specularTexture.name);\r\n            }\r\n            */\r\n        }\r\n\r\n        /* TODO: emissive texture not in .MAT format (???)\r\n        if (m.emissiveTexture) {\r\n            output.push(\"  map_d \"+uvscale+m.emissiveTexture.name);\r\n        }\r\n        */\r\n\r\n        if (m.bumpTexture) {\r\n            output.push(\"  map_bump -imfchan z \" + uvscale + m.bumpTexture.name);\r\n        }\r\n\r\n        if (m.opacityTexture) {\r\n            output.push(\"  map_d \" + uvscale + m.opacityTexture.name);\r\n        }\r\n\r\n        const text = output.join(\"\\n\");\r\n        return text;\r\n    }\r\n}\r\n"]}