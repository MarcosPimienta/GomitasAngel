{"version":3,"file":"xmlLoader.js","sourceRoot":"","sources":["../../../../lts/gui/generated/2D/xmlLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { GetClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst XmlLoaderError = \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n\r\n/**\r\n * Class used to load GUI via XML.\r\n */\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3,\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        textHorizontalAlignment: 1,\r\n        textVerticalAlignment: 2,\r\n        horizontalAlignment: 3,\r\n        verticalAlignment: 4,\r\n        stretch: 5,\r\n    };\r\n\r\n    private _rootNode: any;\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n     * Create a new xml loader\r\n     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n     */\r\n    constructor(parentClass: any = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            const className = GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            const guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = node.attributes[i].value == \"true\";\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n        } catch (exception) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + exception + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        const rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        const dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            const splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (const i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        const guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (!this._rootNode) {\r\n            this._rootNode = guiNode;\r\n        }\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n     */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n     */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n     */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n    /**\r\n     * Disposes the loaded layout\r\n     */\r\n    public dispose(): void {\r\n        if (this._rootNode) {\r\n            this._rootNode.dispose();\r\n            this._rootNode = null;\r\n            this._nodes = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param onSuccess defines the callback called on layout load successfully.\r\n     * @param onError defines the callback called on layout load failure.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, onSuccess: Nullable<() => void> = null, onError: Nullable<(error: string) => void> = null): void {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onload = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                if (!xhttp.responseXML) {\r\n                    if (onError) {\r\n                        onError(XmlLoaderError);\r\n                        return;\r\n                    } else {\r\n                        throw XmlLoaderError;\r\n                    }\r\n                }\r\n\r\n                const xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            }\r\n        };\r\n\r\n        xhttp.onerror = function () {\r\n            if (onError) {\r\n                onError(\"an error occurred during loading the layout\");\r\n            }\r\n        };\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n    /**\r\n     * Initiates the xml layout loading asynchronously\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @returns Promise\r\n     */\r\n    public async loadLayoutAsync(xmlFile: any, rootNode: any): Promise<any> {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            this.loadLayout(xmlFile, rootNode, resolve, reject);\r\n        });\r\n    }\r\n}\r\n"]}