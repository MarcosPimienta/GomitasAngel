{"version":3,"file":"toggleButton.js","sourceRoot":"","sources":["../../../../../lts/gui/generated/2D/controls/toggleButton.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(public name?: string, group?: string) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n"]}