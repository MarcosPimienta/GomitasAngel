{"version":3,"file":"textWrapper.js","sourceRoot":"","sources":["../../../../../lts/gui/generated/2D/controls/textWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n"]}