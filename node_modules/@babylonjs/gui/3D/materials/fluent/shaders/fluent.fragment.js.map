{"version":3,"file":"fluent.fragment.js","sourceRoot":"","sources":["../../../../../../../lts/gui/generated/3D/materials/fluent/shaders/fluent.fragment.ts"],"names":[],"mappings":"AAAA,eAAe;AACf,OAAO,EAAE,WAAW,EAAE,+CAAiC;AAEvD,MAAM,IAAI,GAAG,mBAAmB,CAAC;AACjC,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuDb,CAAC;AACH,aAAa;AACb,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AACxC,gBAAgB;AAChB,MAAM,CAAC,MAAM,iBAAiB,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC","sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentPixelShader\";\nconst shader = `precision highp float;\rvarying vec2 vUV;\runiform vec4 albedoColor;\r#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\r#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;\runiform float edgeSmoothingValue;\runiform float borderMinValue;\r#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\runiform vec3 hoverPosition;\runiform vec4 hoverColor;\runiform float hoverRadius;\r#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;\runiform mat4 textureMatrix;\rvec2 finalUV;\r#endif\nvoid main(void) {\rvec3 albedo=albedoColor.rgb;\rfloat alpha=albedoColor.a;\r#ifdef TEXTURE\nfinalUV=vec2(textureMatrix*vec4(vUV,1.0,0.0));\ralbedo=texture2D(albedoSampler,finalUV).rgb;\r#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\ralbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\r#else\nfloat pointToHover=1.0;\r#endif\n#ifdef BORDER \nfloat borderPower=10.0;\rfloat inverseBorderPower=1.0/borderPower;\rvec3 borderColor=albedo*borderPower;\rvec2 distanceToEdge;\rdistanceToEdge.x=abs(vUV.x-0.5)*2.0;\rdistanceToEdge.y=abs(vUV.y-0.5)*2.0;\rfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\rsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\rborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \ralbedo+=borderColor;\ralpha=max(alpha,borderValue);\r#endif\n#ifdef INNERGLOW\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\ruvGlow=uvGlow*uvGlow;\ruvGlow=uvGlow*uvGlow;\ralbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \r#endif\ngl_FragColor=vec4(albedo,alpha);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentPixelShader = { name, shader };\n"]}