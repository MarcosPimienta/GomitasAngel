{"version":3,"file":"handleMaterial.js","sourceRoot":"","sources":["../../../../../../lts/gui/generated/3D/materials/handle/handleMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Color3, TmpColors } from \"core/Maths/math.color\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport \"./shaders/handle.vertex\";\r\nimport \"./shaders/handle.fragment\";\r\n\r\n/**\r\n * Class used to render gizmo handles with fluent design\r\n */\r\nexport class HandleMaterial extends ShaderMaterial {\r\n    private _hover: boolean = false;\r\n    private _drag: boolean = false;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _color: Color3 = new Color3();\r\n    private _scale: number = 1;\r\n    private _targetColor: Color3;\r\n    private _targetScale: number;\r\n    private _lastTick = -1;\r\n\r\n    /**\r\n     * Is the material indicating hovering state\r\n     */\r\n    public get hover(): boolean {\r\n        return this._hover;\r\n    }\r\n\r\n    public set hover(b: boolean) {\r\n        this._hover = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Is the material indicating drag state\r\n     */\r\n    public get drag(): boolean {\r\n        return this._drag;\r\n    }\r\n\r\n    public set drag(b: boolean) {\r\n        this._drag = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Length of animation\r\n     */\r\n    public animationLength: number = 100;\r\n\r\n    /**\r\n     * Color of the handle when hovered\r\n     */\r\n    public hoverColor: Color3 = new Color3(0, 0.467, 0.84);\r\n\r\n    /**\r\n     * Color of the handle when idle\r\n     */\r\n    public baseColor: Color3 = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Scale of the handle when hovered\r\n     */\r\n    public hoverScale: number = 0.75;\r\n\r\n    /**\r\n     * Scale of the handle when idle\r\n     */\r\n    public baseScale: number = 0.35;\r\n\r\n    /**\r\n     * Scale of the handle when dragged\r\n     */\r\n    public dragScale: number = 0.55;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionOffset: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a handle material\r\n     * @param name Name of the material\r\n     * @param scene Scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene, \"handle\", {\r\n            attributes: [\"position\"],\r\n            uniforms: [\"worldViewProjection\", \"color\", \"scale\", \"positionOffset\"],\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n        });\r\n\r\n        this._updateInterpolationTarget();\r\n\r\n        // Register callback for scene after render\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this.getScene().onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            const delta = tick - this._lastTick;\r\n\r\n            const scaleDiff = this._targetScale - this._scale;\r\n            const colorDiff = TmpColors.Color3[0].copyFrom(this._targetColor).subtractToRef(this._color, TmpColors.Color3[0]);\r\n\r\n            this._scale = this._scale + (scaleDiff * delta) / this.animationLength;\r\n            colorDiff.scaleToRef(delta / this.animationLength, colorDiff);\r\n            this._color.addToRef(colorDiff, this._color);\r\n\r\n            this.setColor3(\"color\", this._color);\r\n            this.setFloat(\"scale\", this._scale);\r\n            this.setVector3(\"positionOffset\", this._positionOffset);\r\n\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _updateInterpolationTarget() {\r\n        if (this.drag) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.dragScale;\r\n        } else if (this.hover) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.hoverScale;\r\n        } else {\r\n            this._targetColor = this.baseColor;\r\n            this._targetScale = this.baseScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the handle material\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);\r\n    }\r\n}\r\n"]}