{"version":3,"file":"stackPanel3D.js","sourceRoot":"","sources":["../../../../../lts/gui/generated/3D/controls/stackPanel3D.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,sCAAwB;AACxC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,6CAA+B;AAErE,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C;;GAEG;AACH,MAAM,OAAO,YAAa,SAAQ,WAAW;IAGzC;;OAEG;IACH,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU,CAAC,KAAc;QAChC,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,EAAE;YAC5B,OAAO;SACV;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAEzB,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE;YACpB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAOD;;;OAGG;IACH,YAAmB,UAAU,GAAG,KAAK;QACjC,KAAK,EAAE,CAAC;QA/BJ,gBAAW,GAAG,KAAK,CAAC;QAqB5B;;WAEG;QACI,WAAM,GAAG,GAAG,CAAC;QAShB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAES,gBAAgB;QACtB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,MAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAE/E,UAAU;QACV,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;gBACb,SAAS;aACZ;YAED,YAAY,EAAE,CAAC;YACf,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACpC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAErF,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,WAAW,CAAC;YAC7D,MAAM,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACzF,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE7B,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,MAAM,IAAI,UAAU,CAAC,CAAC,CAAC;aAC1B;iBAAM;gBACH,KAAK,IAAI,UAAU,CAAC,CAAC,CAAC;aACzB;SACJ;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,MAAM,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACpD;aAAM;YACH,KAAK,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACnD;QAED,UAAU;QACV,IAAI,MAAc,CAAC;QACnB,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,MAAM,GAAG,CAAC,MAAM,CAAC;SACpB;aAAM;YACH,MAAM,GAAG,CAAC,KAAK,CAAC;SACnB;QAED,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;gBACb,SAAS;aACZ;YACD,YAAY,EAAE,CAAC;YACf,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;YAExC,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;gBACzC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;gBACrB,MAAM,IAAI,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;aAC9B;iBAAM;gBACH,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;gBACzC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;gBACrB,MAAM,IAAI,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;aAC9B;YAED,MAAM,IAAI,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAChD;IACL,CAAC;CACJ","sourcesContent":["import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        const extendSizes = [];\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            const extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += ((controlCount - 1) * this.margin) / 2;\r\n        } else {\r\n            width += ((controlCount - 1) * this.margin) / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            const extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += controlCount > 0 ? this.margin : 0;\r\n        }\r\n    }\r\n}\r\n"]}