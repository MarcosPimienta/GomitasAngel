{"version":3,"file":"gui3DManager.js","sourceRoot":"","sources":["../../../../lts/gui/generated/3D/gui3DManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport type { Control3D } from \"./controls/control3D\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    private _customControlScaling = 1.0;\r\n    /** @internal */\r\n    public _lastPickedControl: Control3D;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    protected static MRTK_REALISTIC_SCALING: number = 0.032;\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when a picking happens\r\n     */\r\n    public onPickingObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    // Shared resources\r\n    /** @internal */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** @internal */\r\n    public _touchSharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /** Gets the scaling for all UI elements owned by this manager */\r\n    public get controlScaling() {\r\n        return this._customControlScaling;\r\n    }\r\n\r\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\r\n    public set controlScaling(newScale: number) {\r\n        if (this._customControlScaling !== newScale && newScale > 0) {\r\n            const scaleRatio = newScale / this._customControlScaling;\r\n            this._customControlScaling = newScale;\r\n\r\n            this._rootContainer.children.forEach((control: Control3D) => {\r\n                control.scaling.scaleInPlace(scaleRatio);\r\n\r\n                if (newScale !== 1) {\r\n                    control._isScaledByManager = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public get useRealisticScaling() {\r\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\r\n    }\r\n\r\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public set useRealisticScaling(newValue: boolean) {\r\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.reservedDataStore?.GUI3D?.control?._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        const previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        const pointerEvent = <IPointerEvent>pi.event;\r\n\r\n        const pointerId = pointerEvent.pointerId || 0;\r\n        const buttonIndex = pointerEvent.button;\r\n\r\n        const pickingInfo = pi.pickInfo;\r\n        if (pickingInfo) {\r\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\r\n        }\r\n\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        const control = <Control3D>pickingInfo.pickedMesh!.reservedDataStore?.GUI3D?.control;\r\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint!, pickingInfo.originMesh?.position || null, pointerId, buttonIndex)) {\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\" || (pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile)) {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        if (this._customControlScaling !== 1) {\r\n            control.scaling.scaleInPlace(this._customControlScaling);\r\n            control._isScaledByManager = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        if (control._isScaledByManager) {\r\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\r\n            control._isScaledByManager = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (const materialName in this._sharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        for (const materialName in this._touchSharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._touchSharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._touchSharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onPickingObservable.clear();\r\n\r\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"]}